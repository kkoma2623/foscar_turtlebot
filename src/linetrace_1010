#!/usr/bin/env python
# -*- coding: utf-8 -*- # 한글 주석쓰려면 이거 해야함

import cv2
import numpy as np
import sys
import math
import rospy
import time
import os

from std_msgs.msg import Float64, UInt8, String
from sensor_msgs.msg import CompressedImage
from geometry_msgs.msg import Twist
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import LaserScan
from nav_msgs.msg import Odometry
import tf


class line_traceee:
    def __init__(self):
        # print('init')
        self.sub_select_ang = rospy.Subscriber('/camera2/usb_cam2/image_raw/compressed', CompressedImage,
                                               self.line_trace, queue_size=1)
        self.sub_detect_sigh = rospy.Subscriber('/detect/traffic_sign', UInt8, self.mode_selector, queue_size=1)
        self.sub_obstacle = rospy.Subscriber('/scan', LaserScan, self.obstacle, queue_size=1)
        self.out2 = cv2.VideoWriter('0920_2.avi', cv2.VideoWriter_fourcc('M', 'J', 'P', 'G'), 30, (640, 360))
        self.pub_cmd_vel = rospy.Publisher('/cmd_vel', Twist, queue_size=1)

        # self.trafficSign = Enum('trafficSign', 'left right dontgo construction stop parking tunnel')

        self.bridge = CvBridge()

        ## left line
        self.left_lane = False
        self.left_pos = 0

        ## right line
        self.right_lane = False
        self.right_pos = 0

        self.t1 = 0
        self.t2 = 0

        self.center = 0
        self.lastError = 0
        self.MAX_VEL = 0.2

        # sign
        self.left_sign = False
        self.right_sign = False
        self.construction_sign = False
        self.parking_sign = False
        self.tunnel_sign = False
        self.stop_sign = False

        # mode
        self.curr_mode = 0
        self.mode = False
        self.construction_mode = False
        self.parking_mode = False

        # construction
        self.phase = 1
        self.check = 0
        self.status = 0

        # stop
        self.stop_phase = 1
        self.is_stop = False
        self.stopchk = False
        self.stop_flag = False

        # parking
        self.parking_phase = 0
        self.is_left_turtlebot = False
        self.is_right_turtlebot = False
        self.found_turtlebot = False
        self.parking_sign_sign = False

        self.praking_cnt = 0
        self.back_range_start = 175
        self.back_range_end = 185

        self.parkingchk = False

        # for detect lane
        self.HSL_YELLOW_LOWER = np.array([10, 5, 160])
        self.HSL_YELLOW_UPPER = np.array([40, 255, 255])

        self.HSL_YELLOW_LOWER2 = np.array([24, 17, 140])
        self.HSL_YELLOW_UPPER2 = np.array([38, 255, 255])

        self.HSL_WHITE_LOWER = np.array([0, 0, 200])
        self.HSL_WHITE_UPPER = np.array([180, 255, 255])

        self.speed = 0.1
        self.angular = 30 * np.pi / 180  # 0#35 * np.pi/180#0.0
        self.angular_temp = 0.0

        self.start = False

    def reset_sign(self):
        self.left_sign = False
        self.right_sign = False
        self.construction_sign = False
        self.parking_sign = False
        self.tunnel_sign = False
        self.stop_sign = False

    def mode_selector(self, mode_msg):
        if self.curr_mode == mode_msg.data:
            pass
        else:
            if mode_msg.data == 1:  # left
                print
                self.mode = True
                self.left_sign = True
                self.angular = 30 * np.pi / 180
                self.start = True
                self.parking_sign_sign = False
            elif mode_msg.data == 2:  # right
                print 'Read right'
                self.reset_sign()
                self.mode = True
                self.right_sign = True
                self.angular = -28 * np.pi / 180
                self.start = True
            elif mode_msg.data == 4:  # construction
                print 'Read construction'
                self.reset_sign()
                self.construction_sign = True
            elif mode_msg.data == 5:  # stop
                print 'Read stop'
                self.reset_sign()
                self.stop_sign = True
            elif mode_msg.data == 6:  # parking
                print 'Read parking'
                self.mode = True
                self.reset_sign()
                self.parking_sign_sign = True
            elif mode_msg.data == 7:  # tunnel
                return

            else:
                pass

    def execute_stop_mode(self, msg):
        # print msg.ranges[330]
        ranges = msg.ranges[30:45]
        for i in ranges:
            if i < 0.3:
                self.stop_mode = True
                startTime = time.time()
                while True:
                    endTime = time.time() - startTime
                    if endTime > 1.0:
                        self.stop_mode_end = True
                        break

    def execute_construction_mode(self, msg):
        self.left_sign = False
        self.right_sign = False
        # print msg.ranges[90]
        if 0 < msg.ranges[90] < 0.3 and self.construction_mode is False:
            print 'execute_construction_mode'
            # self.construction_sign = False
            self.construction_mode = True

        if self.construction_mode:
            if self.phase == 1:
                # print 'Phase 1' , self.status
                if self.status == 0:
                    self.speed = 0.1
                    if msg.ranges[90] < 0.3 and msg.ranges[90] != 0:
                        self.status = 1
                    else:
                        self.angular = 0
                elif self.status == 1:
                    self.angular = 0.37

                if msg.ranges[270] < 0.4 and msg.ranges[270] != 0:
                    self.phase += 1
                    self.status = 0

            elif self.phase == 2:
                # print 'Phase 2'
                # print '0 :',msg.ranges[0], '90 :', msg.ranges[90]
                self.angular = -0.4
                if msg.ranges[0] < 0.5 and msg.ranges[0] != 0:
                    self.check += 1
                # print self.check
                if self.check != 0 and msg.ranges[70] < 0.5 and msg.ranges[70] != 0:
                    self.phase += 1

            elif self.phase == 3:
                # self.mode = False
                # print 'Phase 3'
                self.speed = 0.12
                self.angular = 0.36
                if msg.ranges[200] < 0.5 and msg.ranges[200] != 0:
                    self.phase += 1

            elif self.phase == 4:
                # print 'Phase 4'
                # rospy.sleep(rospy.Duration(2))
                self.mode = False
                self.construction_mode = False

            self.move(self.speed, self.angular)

    def execute_parking_mode_with_lidar(self, msg):
        left_range = msg.ranges[80:87]
        right_range = msg.ranges[270:277]
        back_range = msg.ranges[self.back_range_start:self.back_range_end]
        # check_front = msg.ranges[0:5]

        if self.parking_phase == 1:  # both lanes are yellow
            if self.found_turtlebot == False:  # until find parking turtlebot
                for i in left_range:
                    # print left_range
                    if 0 < i < 0.6:
                        print 'parking turlebot in left'
                        self.is_left_turtlebot = True
                        self.is_right_turtlebot = False
                        break
                for i in right_range:
                    if 0 < i < 0.6:
                        print 'parking turlebot in right'
                        self.is_left_turtlebot = False
                        self.is_right_turtlebot = True
                        break
        elif self.parking_phase == 2:  # until check back
            for i in back_range:
                if 0 < i < 0.6:
                    self.parking_phase += 1
                    break

    def check_tunnel(self, msg):
        if self.stopchk == True and \
                (0 < msg.ranges[270] < 0.2) and \
                self.tunnel_sign == False and \
                self.left_lane == False and \
                self.right_lane == False and \
                (0 < msg.ranges[290] < 0.5):
            self.tunnel_sign = True
            speed = 0
            angular = 0
            self.move(speed, angular)
            os.system('roslaunch foscar_turtlebot3_autorace tunnel.launch')
            os.system('rosnode kill /detect_signs')
            os.system('rosnode kill /line_trace')

    def obstacle(self, obstacle_msg):
        msg = obstacle_msg
        # if self.parking_sign_sign and msg.ranges[130] < 0.5:
        #     self.parking_sign = True

        if self.stop_sign:
            self.execute_stop_mode(msg)

        elif self.construction_sign:
            self.execute_construction_mode(msg)

        elif self.parking_sign:
            self.execute_parking_mode_with_lidar(msg)

        self.check_tunnel(msg)

    def myhook(self):  # If Ctrl + c occured, the node ends by myhook function and turtlebot's velocity returns to 0.
        twist = Twist()
        twist.linear.x = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)

    def PD_control(self, kp=0.012, kd=0.004):
        error = self.center - 327
        angular_z = kp * error + kd * (error - self.lastError)
        self.lastError = error
        speed = min(self.MAX_VEL * ((1 - abs(error) / 320) ** 2.2), 0.2)
        angular = -max(angular_z, -2.0) if angular_z < 0 else -min(angular_z, 2.0)

        return speed, angular

    def execute_parking_mode_with_camera(self):
        if self.parking_phase == 0:  # until both lanes are yellow
            # print(self.left_lane, self.right_lane)
            if self.left_lane == True and self.right_lane == False:
                self.center = self.left_pos + 273
            elif self.left_lane == False:  # and self.right_lane == False:
                self.center = 210
            elif self.right_lane == True and self.right_lane == True:
                self.parking_phase += 1
            else:
                pass

            speed, angular = self.PD_control(kp=0.012, kd=0.004)

        elif self.parking_phase == 1:  # '''1단계는 양쪽 라인 다 잇는경우임'''
            if self.left_lane == True and self.right_lane == True:
                self.center = (self.left_pos + self.right_pos) // 2

            elif self.left_lane == True and self.right_lane == False:
                self.center = self.left_pos + 287

            elif self.left_lane == False and self.right_lane == True:
                self.center = self.right_pos - 289
            elif self.left_lane == False and self.right_lane == False:  # '''양쪽라인 다 노랑색이 아닌경우 직진함#'''
                self.center = 327
            else:
                pass

            speed, angular = self.PD_control(kp=0.012, kd=0.004)

            if self.is_left_turtlebot == True:  # '''1단계에서 터틀봇이 왼쪽 혹은 오릉쪽에 잇으면 2단계로 넘어감#'''
                self.found_turtlebot = True
                self.parking_phase += 1
            elif self.is_right_turtlebot == True:
                self.parking_phase += 1
                self.found_turtlebot = True
        elif self.parking_phase == 2:  # '''왼쪽에잇으면 오른쪽으로 회전, 오른쪽에 잇으면 왼쪽으로 회전// 뒤통수에 터틀봇이 잡힐때까지 회전#'''
            if self.is_left_turtlebot == True:
                speed = 0
                angular = math.radians(-45)
            else:
                speed = 0
                angular = math.radians(45)

        elif self.parking_phase == 3:  # '''3초동안 직진#'''
            speed = 0.1
            angular = 0
            self.move(speed, angular)
            rospy.sleep(rospy.Duration(3))
            self.parking_phase += 1

        elif self.parking_phase == 4:  # '''뒤 돈다#'''
            speed = 0
            if self.is_left_turtlebot == True:
                angular = math.radians(-90)
                self.move(speed, angular)
                rospy.sleep(rospy.Duration(2))  # '''2초동안#'''
                self.parking_phase += 1

            else:
                angular = math.radians(90)
                self.move(speed, angular)
                rospy.sleep(rospy.Duration(2))
                self.parking_phase += 1

            speed = 0
            angular = 0
            self.move(speed, angular)
            rospy.sleep(rospy.Duration(0.1))  # '''이거는 주차하고 속도가 0인 순간이 필요해서 넣은 슬립 함수#'''

        elif self.parking_phase == 5:  # '''여기서 탈출 한다 2.8초동안 하드 코딩함#'''
            speed = 0.2
            if self.is_left_turtlebot == True:
                angular = math.radians(55)
            else:
                angular = math.radians(-55)
            self.move(speed, angular)
            rospy.sleep(rospy.Duration(2.8))
            self.parking_phase += 1

        elif self.parking_phase == 6:  # '''여기서부터 양쪽 다 노랑색인 구간////// 여기 알고리즘 수정해서 그냥 self.left_sign True로 만들어 주면 될듯 주석달때 보니까 알고리즘 여기 엉망이네#'''
            speed = 0.12
            angular = 0
            self.mode = False
            self.parking_sign = False

        # print self.parking_phase

        self.move(speed, angular)  # '''모든 스피트와 각도는 여기서 퍼블리싱함'''

    def line_trace(self, img_data):  ### left : -  ### right : +
        rospy.on_shutdown(self.myhook)
        try:
            cv_image = self.bridge.compressed_imgmsg_to_cv2(img_data, "bgr8")
        except CvBridgeError as e:
            # print(e)
            pass

        frame = cv2.resize(cv_image, (640, 360), interpolation=cv2.INTER_AREA)
        ROI = frame[335:355, :]
        self.get_line(ROI)

        if self.parking_sign:
            self.execute_parking_mode_with_camera()

        elif self.construction_mode:
            return

        elif self.tunnel_sign:
            return

        else:  # default line trace
            # print'line tracing'
            # print 'left line : ',self.left_lane
            # print 'right line : ', self.right_lane
            # print self.left_lane, self.right_lane
            # center = self.center
            if self.is_stop and self.stopchk == False: # stop
                angular = 0
                speed = 0
                self.move(speed, angular)
                rospy.sleep(rospy.Duration(4.5))
                self.move(0, 0)
                rospy.sleep(rospy.Duration(1.5))
                self.left_lane = True
                self.right_lane = True
                self.is_stop = False
                self.stop_sign = False
                self.stopchk = True
                self.angular = 0
            elif self.left_lane == False and self.right_lane == False:
                angular = self.angular
                speed = 0.12
            else:
                if self.left_lane == True and self.right_lane == True:
                    self.center = (self.left_pos + self.right_pos) // 2

                elif self.left_lane == True and self.right_lane == False:
                    if self.right_sign:
                        self.center = 420
                    else:
                        self.center = self.left_pos + 287  # 40

                elif self.left_lane == False and self.right_lane == True:
                    if self.left_sign:
                        self.center = 200
                    else:
                        # print 'elseeeeeeeeeeee'
                        self.center = self.right_pos - 289  # 616
                else:
                    pass

                speed, angular = self.PD_control(kp=0.016, kd=0.006)

            angular = round(angular, 3)
            speed = round(speed, 3)
            self.move(speed, angular)

        self.left_lane = False
        self.right_lane = False

    def process_img(self, frame):
        hsl = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        if self.parking_sign_sign:
            yellow_binary = cv2.inRange(hsl, self.HSL_YELLOW_LOWER2, self.HSL_YELLOW_UPPER2)
            white_binary = cv2.inRange(hsl, self.HSL_YELLOW_LOWER2, self.HSL_YELLOW_UPPER2)
        else:
            yellow_binary = cv2.inRange(hsl, self.HSL_YELLOW_LOWER, self.HSL_YELLOW_UPPER)
            white_binary = cv2.inRange(hsl, self.HSL_WHITE_LOWER, self.HSL_WHITE_UPPER)
        concat_binary = cv2.hconcat([yellow_binary, white_binary])
        cv2.imshow('concat_binary', concat_binary)
        gray_img = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        gaussianB = cv2.GaussianBlur(gray_img, (5, 5), 0)
        canny = cv2.Canny(gaussianB, 50, 150)

        return canny

    def get_line(self, frame):
        canny_img = process_img(frame)

        cv2.imshow('canny_img', canny_img)
        lines = cv2.HoughLinesP(canny_img, 1, np.pi / 180, 10, 5, 10)

        if lines is not None:
            lines = [l[0] for l in lines]
            left_arr = []
            right_arr = []
            for x1, y1, x2, y2 in lines:
                if x1 < 320 and self.left_lane == False: # left lane
                    if x1 - 20 < 0:
                        x = 0
                    else:
                        x = x1 - 20
                    detect_area = yellow_binary[5: 15, x: x1]
                    nonzero = cv2.countNonZero(detect_area)
                    if nonzero > 30:
                        left_arr.append(x1)

                elif x2 > 320 and self.right_lane == False: # right lane

                    # print x1,y1,x2,y2
                    # #print 'right degree', degree
                    detect_area = white_binary[5: 15, x2: x2 + 20]
                    nonzero = cv2.countNonZero(detect_area)
                    # print 'r_x2', x2, nonzero
                    if nonzero > 30:
                        # self.right_pos = x1
                        right_arr.append(x2)

                else:
                    continue

            if len(left_arr) > 0:
                self.left_lane = True
                self.left_pos = left_arr[0]
            # if len(left_arr) > 1:
            # 	self.left_pos = np.mean(left_arr[len(left_arr)//5 : (4 * len(left_arr)//5)])

            if len(right_arr) > 0:
                # print 'bbbbbbbbbbbbbbbbbb'
                self.right_lane = True
                self.right_pos = right_arr[0]

            cv2.circle(frame, (int(self.center), 355), 5, (0, 0, 255), 3, -1)
            cv2.circle(frame, (int(self.right_pos), 355), 5, (255, 0, 0), 3, -1)
            cv2.circle(frame, (int(self.left_pos), 355), 5, (0, 255, 0), 3, -1)

        # if len(right_arr) > 1:
        # 	self.right_pos = np.mean(right_arr[len(right_arr)//5 : (4 * len(right_arr)//5)])

    def move(self, speed, angle):
        angular_z = angle
        twist = Twist()
        twist.linear.x = speed
        twist.angular.z = angular_z

        self.pub_cmd_vel.publish(twist)

    def main(self):
        rospy.spin()


if __name__ == '__main__':
    rospy.init_node('line_trace')  # , anonymous=True)
    node = line_traceee()
    node.main()



