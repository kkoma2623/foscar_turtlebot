#!/usr/bin/env python
# -*- coding: utf-8 -*- # 한글 주석쓰려면 이거 해야함

import rospy
import os
import cv2
import numpy as np
from cv_bridge import CvBridge
from sensor_msgs.msg import CompressedImage

class detectTrafficLight:
	def __init__(self):
		print 'init'
		self.sub_img = rospy.Subscriber('/camera1/usb_cam1/image_raw/compressed', CompressedImage, self.callback, queue_size=1)
		self.bridge = CvBridge()
		self.red_lower=np.array([0,15,255], np.uint8)
		self.red_upper=np.array([18,255,255],np.uint8)

		#defining the Range of green color
		self.green_lower=np.array([50,80,80],np.uint8)
		self.green_upper=np.array([80,220,200],np.uint8)
		
		#defining the Range of yellow color
		self.yellow_lower=np.array([0,102,165],np.uint8)
		self.yellow_upper=np.array([20,255,255],np.uint8)

		self.green_cnt = 0
	
	def callback(self, img_data):
		img = self.bridge.compressed_imgmsg_to_cv2(img_data, "bgr8")
		img = img[100:, 320:]
		hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
		#finding the range of red,green and yellow color in the image
		red=cv2.inRange(hsv, self.red_lower, self.red_upper)
		green=cv2.inRange(hsv,self.green_lower,self.green_upper)
		yellow=cv2.inRange(hsv,self.yellow_lower,self.yellow_upper)

		kernal = np.ones((5,5), "uint8")

		red = cv2.dilate(red, kernal)
		res = cv2.bitwise_and(img, img, mask = red)
		
		green = cv2.dilate(green, kernal)
		res1 = cv2.bitwise_and(img, img, mask = green)

		yellow = cv2.dilate(yellow, kernal)
		res2 = cv2.bitwise_and(img, img, mask= yellow)

		(_,contours,hierarchy)=cv2.findContours(red,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
		for pic, contour in enumerate(contours):
			area = cv2.contourArea(contour)
			if(area>300):
				x,y,w,h = cv2.boundingRect(contour)	
				img = cv2.rectangle(img,(x,y),(x+w,y+h),(0,0,255),2)
				cv2.putText(img,"RED",(x,y),cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0,0,255)); print('red')
				#print "red"
			
				
		(_,contours,hierarchy)=cv2.findContours(green,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
		for pic, contour in enumerate(contours):
			area = cv2.contourArea(contour)
			if(area>300):
				x,y,w,h = cv2.boundingRect(contour)	
				img = cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)
				cv2.putText(img,"Green",(x,y),cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255,0,0)); print('green')
				self.green_cnt += 1
				if self.green_cnt > 10 :
					#os.system('roslaunch foscar_turtlebot3_autorace line.launch')
					os.system('rosrun foscar_turtlebot3_autorace detect_sign_1004')
					# os.system('rosrun foscar_turtlebot3_autorace detect_sign')
					os.system('rosnode kill /traffic_light_sign')
									
		(_,contours,hierarchy)=cv2.findContours(yellow,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
		for pic, contour in enumerate(contours):
			area = cv2.contourArea(contour)
			if(area>300):
				x,y,w,h = cv2.boundingRect(contour)	
				img = cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,0),2)
				cv2.putText(img,"Yellow",(x,y),cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0,255,0)); print('yellow')
		
		# cv2.waitKey(1)
		# cv2.imshow('aa', img)
	def main(self):
		rospy.spin()

if __name__ == '__main__':
	print 'main'
	rospy.init_node('traffic_light_sign')
	node = detectTrafficLight()
	node.main()
